# Rohit-Kumar

#!/usr/bin/env python
# coding: utf-8

# #   Python Tutorial

# # Python Syntax and indentation

# In[1]:


if 5 > 2:
    print('fige is greater then two')


# In[2]:


#Syntax Error expected an indented block
if 5 > 2:
print("five is greater then two")#expected an indented block


# In[81]:


"""The number of spaces is to you as a programmer but it has to be at least one"""
if 5 > 2:
     print("five is grater then two")
if 5 > 2:
    print("five is grater then two")


# In[4]:


"""you have to use the same number of spaces in the same block of code
 otherwise python will you an error"""
if 5 > 2:
print("five is greater then two")
      print("five is greater then two")


# # python variables

# In[5]:


x = 5
y = "Hello world!"


# # python Variables

# In[6]:


x = 5
y = 'yashi'
print(x)
print(y)


# In[7]:


x = 4 # x is of type int
x  = "sally" # x is now of type string
print(x)


# In[9]:


x = "rohit"
# is the same as
x = "rohit"
print(x)


# # Variable Names 

# # Assign Value to Multiple Variables

# In[13]:


# python allow you to assing value to multiple variables in one line 
x, y, z = "Orange", "Banana", "yashi"
print(x)
print(y)
print(z)


# In[15]:


x = y = z = "Orange"
print(x)
print(y)
print(z)


# # Output Variables

# In[16]:


#To combine both text and a variable, Python uses the + character:
x = "awesome"
print("python is " + x)


# In[17]:


#you can also use the + character to add a variable another varible

x = "python is "
y = "very usefull language"
z = x + y
print(z)


# In[18]:


#for number, the + character as a mathematical operator
x = 5
y = 10
print(x+y)


# In[20]:


# if you try to combine a string a number python will goive yopu an error
x = 5
y = "yashi"
#print(x+y)


# # Global varibles

# In[23]:


# create a varible outside of a function, and use it inside the function
x = "mangan"
def myfunc():
    print("This is a " + x)
    
myfunc()


# In[26]:


# Create a varible inside a function, with the same name as the global varible
x = "mangan"

def my_yashi():
    x = "yashi"
    print("This is my wife " + x)
    
my_yashi()

print("This is a " + x)


# # The Globle keyworld

# In[29]:


# if you use the globle keybord, The varible belongs to the global scope
def my_function():
    global r
    r = "yashi"
my_function()

print("this is my wife " + r)


# In[32]:


# To change the value of a global varible inside a function, refer to the variable by using the global keybord
p = "yashi"

def my_func():
    global p
    p = "mangan"
my_func()

print("This is a " + p)


# In[34]:


# Also, use The global keyword if wnat to change a global variable inside a function
x = "awesome"

def my_fun():
    global x
    x = "fantestic"
    
my_fun()

print("python is " + x)


# # Python Data Types

# In[35]:


# You can get the type of any using the type() function
x = 5
print(type(x))


# In[36]:


y = 5.5
print(type(y))


# In[37]:


z = "mangan"
print(type(z))


# In[40]:


# string function
a = "hello world"
print(type(a))
a_1 = str("Hello world")
print(a_1)


# In[42]:


# int function
b = 20
print(type(b))
b_1 = int(20)
print(b_1)


# In[44]:


# float function
c = 2.0
print(type(c))
c_1 = float(2.0)
print(c_1)


# In[46]:


# complex function
d = 1j
print(type(d))
d_1 = complex(1j)
print(d_1)


# In[56]:


#list function
e = ["apple","mango","rohit","yashi","shivi"] # write list function 
print(type(e))
e = list(("apple","mango","rohit","yashi","shivi")) #use list function
print(e)


# In[58]:


# tuple function
q = ("red","blue","orange","black","white")
print(type(q))
q = tuple(("red","blue","white","green","black"))
print(q)


# In[61]:


# range function
x = range(6)
print(x)


# In[67]:


# dict function
g = {"name":"yashi","age" : 21} # write dict function
print(type(g))
g = dict(name = "rohit",age=36) #use dict function
print(g)

l = {"act","arsie","abuse","arrive"}
print(type(l))
l = (("ansswer","ask","advise","awake"))
print(l)
# In[76]:


# frozenset function
x = frozenset({"bear","become","begin","bend"}) #write the function
print(type(x))
x = frozenset(("bid","be","beat","beg","bless","bind"))
print(x)


# In[78]:


# bool function true and faluse
x = True
print(type(x))
x = bool(5)
print(x)


# In[81]:


# bytes function
x = b"Hello"
print(type(x))
x = bytes(5)
print(x)


# In[84]:


#bytearray function
x = bytearray(5)
print(type(x))
print(x)


# In[86]:


t = memoryview(bytes(5))
print(type(t))
print(t)


# # Python Numbers

# In[92]:


x = 1 # int
y = 2.0 # float
z = 1j # complex
print(type(x),"value = ", x)
print(type(y),"value = ", y)
print(type(z),"value = ", z)


# Int, or integer is a whole number, positive or negative, without decimals of unlimited length

# In[94]:


x = 1
y = 9009977328777329873
z = -93299239
print(type(x),"value = ", x)
print(type(y),"value = ", y)
print(type(z),"value = ", z)


# # Float

# In[95]:


x = 1.20
y = 1.0
z = -23.3222
print(type(x),"value = ", x)
print(type(y),"value = ", y)
print(type(z),"value = ", z)


# Float can also be scientific numbers with an "e" to indicate the power of 10

# In[98]:


x =35e3
y = 12E4
Z = -87.7e100
print(type(x),"value_X = ", x)
print(type(y),"value_Y = ", y)
print(type(z),"value_Z = ", z)


# # complex

# complex number are written with a "j" as the imaginary part

# In[99]:


x = 3+5j
y = 5j
z = -5j
print(type(x),"value_X = ", x)
print(type(y),"value_Y = ", y)
print(type(z),"value_Z = ", z)


# # type conversion

# you can convert from one to another with the int(),float(),and complex()

# In[102]:


x = 1 # int
y = 2.9 #float
z = 1j # complex
#convert from into to float
a = float(x)

#convert from into to int
b = int(y)

#convert from into to complex
c = complex(x)
print(type(a),"value_a = ", a)
print(type(b),"value_b = ", b)
print(type(c),"value_c = ", c)


# # Random Number 

# Python does not have a random() function to make a random number, but Python has a built-in module called random that can be used to make random numbers:

# In[116]:


import random

print(random.randrange(1,10))


# # python casting

# integers

# In[117]:


x = int(1) # x will be 1
y = int(2.8) # y will be 2
z = int("3") # z will be 3
print(type(x),"value_X = ", x)
print(type(y),"value_Y = ", y)
print(type(z),"value_Z = ", z)


# Floats

# In[118]:


x = float(1) # X will be 1.0
y = float(2.8) # y will be 2.8
z = float("3") # z will be 3.0
w = float("4.2") # w will be 4.2
print(type(x),"value_X = ", x)
print(type(y),"value_Y = ", y)
print(type(z),"value_Z = ", z)
print(type(w),"value_w = ", w)


# String:

# In[119]:


x = str("s1") # x will be "s1"
y = str(2) # y will be '2'
z = str(3.0) # z will be '3.0'
print(type(x),"value_x = ", x)
print(type(y),"value_y = ", y)
print(type(z),"value_Z = ", z)


# # python String

# String Literals
# 
# String literals in python are surrounded by either single quotation marks, or double quotation marks.
# 
# 'hello' is the same as "hello".
# 
# You can display a string literal with the print() function:

# In[120]:


print("Hello")
print('Hello')


# # Assing String to a varible

# In[121]:


a = "Hello"
print(a)


# In[132]:


c = str(input("Enter the string..."))


# # Multiline Strings

# you can use three double quotes

# In[134]:


a = """i am rohit kumar,from kolkata,software engineer,
into very high parpormaction, robotics engibeering. """
print(a)


# you can use three signal quotes

# In[135]:


a = '''i am rohit kumar,from kolkata,software engineer,
into very high parpormaction, robotics engibeering.'''
print(a)


# # Strings are Arrays

# Get the character at position 1 (remember that the first character has the position 0):

# In[136]:


a = "Hello, world!"
print(a[1])


# # Slicing
# 

# You can return a range of characters by using the slice syntax.
# 
# Specify the start index and the end index, separated by a colon, to return a part of the string.

# In[138]:


#Get the characters from position 2 to position 5 (not included):
a = "Hello, world!"
print(a[2:5])


# # Negative Indexing
# 

# Use negative indexes to start the slice from the end of the string:

# In[139]:


#Get the characters from position 5 to position 1, starting the count from the end of the string:
b = "Hello, world!"
print(b[-5:-2])


# # String Length

# To get the length of a string, use the len() function.

# In[140]:


#The len() function returns the length of a string:
a = "Hello, world!"
print(len(a))


# # String Methods
# 

# Python has a set of built-in methods that you can use on strings.

# The strip() method removes any whitespace from the beginning or the end:

# In[141]:


a = "Hello, world!"
print(a.strip()) # returns "Hello, World!"


# The lower() method returns the string in lower case

# In[143]:


a = "HELLO, WORLD!"
print(a.lower())


# The upper() method returns the string in upper case

# In[144]:


b = "Hello, world"
print(b.upper())


# The replace method replace a string with another string

# In[146]:


a = "Hello, world!"
print(a.replace("Hello", "yashi"))


# The split() method splits the string into substrings if it finds instances of the separator
# 

# In[147]:


a = "Hello, world!"
print(a.split())


# # Check String

# To check if a certain phrase or character is present in a string, we can use the keywords in or not in.

# In[1]:


#Check if the phrase "ain" is present in the following text:
txt = "The rain in Spain stay mainly in the plain"
x = "ain" in txt
print(x)


# In[2]:


#Check if the phrase "ain" is NOT present in the following text:
txt = "The rain in Spain stays mainly in the plain"
x = "ain" not in txt
print(x)


# # String Concatenaation

# To concatenate, or combine, two string you can use the + operator

# In[2]:


# Merge variable "a" with variable "b" into variable
a = "Hello "
b = "world"
c = a+b
print(c)


# In[4]:


# To add a space between them, add a " ":
a = "Hello"
b = "world"
c = a + " " + b
print(c)


# # String Format

# As we learned in the python variables chapter, we connot combine string and number like this

# In[8]:


age = 36
txt = "My name is yashi, i am age ") + age)
print(txt)


# But we can combine string and numbers by using format() method!
# 
# The format() method takes the aruments the passed arguments, formate them, and places them in the where in the sring where the placeholders
# { } are:

# In[11]:


# Use the format() method to insert number into string:
age = 21
text = "My name is yashi, and I am age {}"
print(text.format(age))


# The format() method takes unlimited number of arguments, and are placed into the
# respective placeholders

# In[12]:


quantity = 3
itemno = 567
price = 49.95
myorder = "I want {} pieces of item {} for {} dollars."
print(myorder.format(quantity, itemno, price))


# You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:
#     

# In[13]:


quantity = 3
itemno = 567
price = 49.59
my_order = "I want to pay {2} dollars for {0} pieces of item {1}."
print(my_order.format(quantity, itemno, price))


# # Escape Character

# To insert characters that are illegal in a string, use an escape character
# 
# An escape character is a backslash "\" follwed by the character you want to insert
# 
# An example of an illegal character is a double quote inside a string that is surrounded by double quotes

# In[15]:


# will get an error if you use double quotes inside a string that is surrounded by double quotes
#txt = "my name is rohit second name "Mangan" from patna"# error


# The escape character allows you to use double quotes when you normally would not be allowed

# In[18]:


txt = "my name is rohot second name is \"Mangan\" from patna"
print(txt)


# # Other escape characters used in python

# In[19]:


# Single Quote
txt = "my name is\' mangan"
print(txt)


# In[22]:


#Backslash
txt = "my name is\\ mangan"
print(txt)


# In[24]:


# New Line
txt = "my name is \n mangan"
print(txt)


# In[31]:


# Carriage Return
txt = "my name is \r mangan"
print(txt)


# In[32]:


# Tab 
txt = "my name is \t mangan"
print(txt)


# In[36]:


# Backspace
txt = "my name is r\b mangan"
print(txt)


# In[40]:


# Form Feed
txt = "my name is \f mangan"
print(txt)


# In[47]:


# Octal value
txt = "my name is \ooo mangan"
print(txt)


# In[51]:


# Hex value 
txt ="my name is \xhh mangan"
print(txt)


# In[57]:


txt = " Hello World "
x = txt.strip()
print(x)


# # Python Booleans

#  Booleans represent one of two value: True or False

# In[58]:


print(10 > 9)


# In[59]:


print(10 == 9)


# In[60]:


print(10 < 9)


# when you run a condition in an if statement, Python return True or False

# In[64]:


# Q- print a masseges based on whether the condition is True or False

a = 45
b = 33

if b > a:
    print("b is greater than a")
else:
    print("b is not greater then a")


# # Evaluate value and Variables

# The bool() function allows you evaluate any value, and give you True or False in return

# In[66]:


#Evaluate a string and a number
print(bool("Hello"))
print(bool(15))


# In[67]:


x = "Hello"
y = 15
print(bool(x))
print(bool(y))


# # Most Values are True

# Almost any value is evaluated to True if it has some sort of content.
# 
# Any string is True, except empty strings.
# 
# Any number is True, except 0.
# 
# Any list, tuple, set, and dictionary are True, except empty ones.

# In[68]:


bool("abe")
bool(123)
bool(["apple","bell","cathu"])


# # Some Values are False

# In fact, there are not many values that evaluates to False, except empty values, such as (), [], {}, "", the number 0, and the value None. And of course the value False evaluates to False.

# In[69]:


bool(False)


# In[70]:


bool(None)


# In[71]:


bool(0)


# In[72]:


bool("")


# In[73]:


bool(())


# In[74]:


bool([])


# In[75]:


bool({})


# One more value, or object in this case, evaluates to False, and that is if you have an objects that are made from a class with a      __len__ function that returns 0 or False:

# In[76]:


class my_class():
    def __len__(self):
        return 0
    
    
myobj = my_class()
print(bool(myobj))


# # Functions can Return a Boolean

# Python also has many built-in functions that returns a boolean value, like the isinstance() function, which can be used to determine if an object is of a certain data type:

# In[80]:


# Check if an object is an integer or not:
x = 200
print(isinstance(x,int))


# # Python Operators

# @ Arithmetic operator
# @ Assignment operator
# @ Comparison operator
# @ logical    operator
# @ identiy    operator
# @ Membership operator
# @ Bitwise    operator

# # Python Arithmetic Operator

# Addition

# In[82]:


x = 5
y = 6
print(x+y)


# In[83]:


c = x+y
print(c)


# subtraction

# In[86]:


y = 10
r = 5
print(y-r)
print(r-y)
c = y-r
print(c)


# Multiplication

# In[87]:


r = 5
y = 3
print(r*y)


# Division

# In[89]:


y = 10
m = 5
print(y/m)
print(m/y)


# Modulus

# In[91]:


y = 11
m = 5
print(y%m)
print(m%y)


# Exponentiatin

# In[97]:


y = 5
m = 3
print(y**m)


# Floor division

# In[100]:


y = 25
m = 5
print(y//m)


# # python Assignment Operators

# In[107]:


x = 5
y = 5
print(x)
if (x==y):
    print("True")
else:
    print("Faluse")


# In[129]:


x = 5
x += 5
print(x)
x = 5
x = x + 5
print(x)


# In[130]:


y = 5
y -= 3
print(y)
y = 5
y = y - 3
print(y)


# In[131]:


c = 5
c *= 5
print(c)
c = 5
c = c * 5
print(c)


# In[132]:


d = 10
d /= 2
print(d)

d = 10
d = d / 2
print(d)


# In[133]:


e = 11
e %= 2
print(e)

e = 11
e = e % 2
print(e)


# In[134]:


f = 11
f //= 2
print(f)

f = 11
f = f // 2
print(f)


# In[135]:


g = 3
g **= 2
print(g)

g = 3
g = g ** 2
print(g)


# In[136]:


h = 12
h = h & 11
print(h)

h = 12
h &= 11
print(h)


# In[143]:


i = 11
i |= 5
print(i)

i = 11
i = i | 5
print(i)


# In[148]:


j = 20
j ^= 2
print(j)

j = 20
j = j ^ 2
print(j)


# In[152]:


k = 20
k >>= 3
print(k)


# In[153]:


k = 20
k = k>>3
print(k)


# In[154]:


l = 20
l <<= 3
print(l)


# In[155]:


l = 20
l = l<<3
print(l)


# # Python Comparison Operators

# Comparison Operator are used to compare two value

# Equal

# In[156]:


x = 5
y = 3
print(x==y)


# In[158]:


c = x==y
print(c)


# Not equal

# In[161]:


x = 10
y = 8
print(x != y)


# In[162]:


c = x != y
print(c)


# Greater than

# In[163]:


x = 10
y = 9
print(x>y)


# In[164]:


c = x>y
print(c)


# Less than

# In[166]:


x = 10
y = 8
print(x < y)


# In[167]:


c = x < y
print(c)


# Greater than or equal to

# In[170]:


x = 10
y = 9
print(x >= y)


# In[171]:


c = x >= y
print(c)


# Less than or equal to

# In[172]:


x = 10
y = 9
print(x <= y)


# In[173]:


c = x <= y
print(c)


# # Python Logical Operators

# Logical Operators are used to combine conditional statements:

# Returns True if both statements are true 

# In[181]:


# and
x = 5
print(x > 4 and x < 10)


# In[182]:


y = 10
c = y > 9 and y < 12
print(c)


# Returns True if one the statements is true

# In[185]:


# or
x = 5
print(x > 3 or x < 4) 
# returns True because one of the conditions are true (5 is greater than 3, but 5 is not less than 4)


# In[188]:


# returns False because not is used to reverse the result
x = 5
print(not(x < 5 and x < 10))


# # Python Identity Operator

# Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:
# 

# is

# In[192]:


x = ["apple", "banana"]
y = ["apple", "banana"]
z = x
# returns True because z is the same object as x
print(x is z)


# In[193]:


# returns False because x is not the same object as y, even if they have the same content
print(x is y)


# In[194]:


# To demonstrate the difference between "is " and "==": this comparison returns True because x is equal to y
print(x == y)


# is not

# In[195]:


c = ["apple","mango"]
d = ["apple","mango"]
e = c
# returns False because z is the same object as x
print(e is not d)


# In[196]:


# returns True because x is not the same object as y, even if they have the same content
print(c is not e)


# In[197]:


print(x != y)

# to demonstrate the difference betweeen "is not" and "!=": this comparison returns False because x is equal to y


# # Python Membership Operators

# in

# In[8]:


# returns True because a sequence with the value "banana" is in the list
x = ["apple","banana"]
print("banana" in x)


# In[9]:


x = ["seek","sound"]
y = ["sweep","spend"]
print("seek" in x,"sweep" in y)


# In[11]:


x = ["spread","shed"]
print("spread" not in x)


# In[12]:


x = ["seek","sound"]
y = ["sweep","spend"]
print("seek" not in x,"sweep" not in y)


# # Python Bitwise OPerators

# Bitwise Operators are used to compare(binary) numbers:

# & AND

# In[15]:


# Sets each bit to 1 if both bits are 1

x = 5
y = 25
print(x & y)


# | OR

# In[17]:


# Sets each bit to 1 if one of two bits is a
x = 34
y = 23
print(x | y)


# ^  XOR

# In[19]:


# Sets each bit to 1 if only one of two bits is 1
x = 123
y = 323
print(x ^ y)


# ~ NOT

# In[22]:


# Inverts all the bits
y = 23
print(~ y)


# In[23]:


# Zero fill left shift 
# Shift left by pushing zeros in from the and let the leftmost bits fall off
x = 123
y = 23
print(x << y)


# In[24]:


# Signed right Shift
# Shift right by pushing copies of the leftmost bit in from the left, and let the rihjymost bits
x = 3445
y = 3243
print(x >> y)


# # Python Lists

# Python Collection (Arrays)

# There are collection data types in the python  programming langauge

# List is a collection which is ordered and changeable. Allows duplicate members.
# 
# Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
# 
# Set is a collection which is unordered and unindexed. No duplicate members.
# 
# Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.
# 
# 
# When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.

# # List

# A list a collection  which is ordered and changeable. in python lists are written with square brackets

# In[25]:


list_create = ["apple","mango","banana","cherry"]
list_create


# In[26]:


list_number_char = ["yashi",21,"rohit",22,"mangan",23]
list_number_char


# # Access Items

# You access the list items by referring to the index number

# In[27]:


# Print The Second item of the list:
list_items = ["apple","mango","banana","cherry"]
print(list_items[1])


# In[28]:


list_number_char = ["yashi",21,"rohit",22,"mangan",23]
print(list_number_char[1])


# # Negative Indexing

# Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.

# In[29]:


# Print thge list item of the list
list_item = ["apple","Banana","Mango","cherry"]
print(list_item[-1])


# # Range of Indexes

# You can specify a range of indexes by specifying where to start and where to end the range.
# 
# When specifying a range, the return value will be a new list with the specified items.

# In[30]:


# Return the third, and fifth item:
list_item = ["apple","Banana","Mango","papaya","cherry","orange","melon","kiwi"]
print(list_item[2:5])


# By leaving out the start, the range will start at the first item:
#     

# In[32]:


#This example returns the items from the beginning to "orange"
list_item = ["apple","Banana","Mango","papaya","cherry","orange","melon","kiwi"]
print(list_item[:6])


# By leaving out the end value, the range will go on to the end of the list
# 

# In[33]:


# This Example return the items from "cherry" and to the end:
list_item = ["apple","Banana","cherry","orange","kiwi","melon","Mango"]
print(list_item[2:])


# # Range of Negative Indexes

# Specify Negative indexes if you want to start the search from the end of the list:
#     

# This example returns the items from index -4 (included) to index -1 (excluded)

# In[34]:


thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[-4:-1])


# # Change item Value

# To change the value of a specific item, refer to the index number:

# In[36]:


# change the seconde item
list_item = ["apple","charry","Mango"]
list_item[1] = "blackcurrant"
print(list_item)


# # Loop Through a list

# In[39]:


# Q:- print all items in the list, one by one 
list_item = ["apple","ball","rat","fat"]
for x in list_item:
    print(x)


# Check if item Exists

# To determine if a specified item is present in a list use the in Keywoed

# In[40]:


# Check if "apple" is present in the list:
list_item = ["apple","Banana","cherry","Mango"]
if "apple" in list_item:
    print("yes, 'apple' is in the fruite list ")
else:
    print("No, 'apple' is in fruite list")


# # List length

# To determine how many items a list, use has, the len() function:

# In[41]:


# print the number of in the item 
list_item = ["apple","Manbgo","Banana","charry"]
print(len(list_item))


# # ADD Item 

# TO add item to the end of the list, use the append() method:

# In[47]:


#Using the append() Method to append an item:
list_item = ["apple","Mango","Banana"]
list_item.append("orange")
print(list_item)


# To add an item at the Specified index, use the insert() method:

# insert an item as the Second position:

# In[48]:


list_item = ["apple","charry","mango","Bnanana"]
list_item.insert(1,"orange")
print(list_item)


# In[ ]:





# # Remove Item

# There are Serveral method to removed items from a list:

# In[50]:


# The removed() method removed the saecified item:
list_item = ["apple","Mango","Banana","charry"]
list_item.remove("Banana")
print(list_item)


# The pop() method removed the specified index,(or the last item if index is not specified)
# 

# In[52]:


list_item = ["apple","Banana","charry","Mango"]
list_item.pop()
print(list_item)


# The del keyword removed the specified index:

# In[54]:


list_item = ["apple","Banana","cherry"]
del list_item[0] # del function used the program
print(list_item)


# The del keyword can also dalate the list completely: 

# In[57]:


list_item = ["apple","Banana","cherry"]
del list_item


# In[ ]:





# The CLEAR() method method empties the list:

# In[59]:


list_item = ["apple","Mango","Banana","charry"]
list_item.clear()
print(list_item)


# # Copy a List

# You cannot copy a list Simply by typing ,list2 = list2, because: list2 will only be a reference to list, and 
#     changes made in list will automatical also be made in list2

# In[60]:


# Make a copy of list with the copy() method:
list_item = ["apple","Mango","orange","Banana"]
mylist = list_item.copy()
print(mylist)


# Anothe way to make a copy is to use the built-in method list().

# In[61]:


#Make a copy of list with the list() method
thislist = ["apple","Mango","Banana","orange"]
mylist = list(thislist)
print(mylist)


# # Join Two Lists

# There are several ways to join, or concatenate, two or more lists in python
# 
# One of the easiest ways are by using the + operator

# In[62]:


# join two list:
list1 = ["yashi","mangan","rohit"]
list2 = [1,2,3]
print(list1 + list2)


# In[63]:


list1 = ["yashi","mangan","rohit"]
list2 = [1,2,3]
list3 = list1 + list2
print(list3)


# In[64]:


list1 = ["yashi","mangan","rohit"]
list2 = [1,2,3]
list3 = list2 + list1
print(list3)


# Append list2 into list1

# In[65]:


list1 = ["yashi","rohit","Mangan"]
list2 = [1,2,3]
for x in list2:
    list1.append(x)
print(list1)


# In[74]:


list1 = ["yashi","rohit","Mangan"]
list2 = [1,2,3]
for y in list2:
    list1.append(y)
    print(list1)


# Or you can use the extend() method, which purpose is to add elements from one list another list:

# In[75]:


# Use the extend() method to add list2 at the end of list1

list1 = ["yashi","rohit","Mangan","Maharaj"]
list2 = [1,2,3,4]

list1.extend(list2)
print(list1)


# # The list() Constructor 

# It is also possible to use the list() constructor to make a new list

# In[78]:


# Using the list() constructor to make a list:
this_list = list(("apple","Orange","Mango","cherry")) # note the double round-brackets
print(this_list)


# # List Method

# Python has a set of built-in methods that you can on lists:

# append() """Adds an element at the end of the list"""
# 
# clear() """Removes all the elements from the list"""
# 
# copy() """Returns a copy of the list"""
# 
# count() """Returns the number of elements with the specified value"""
# 
# extend() """Add the elements of a list(or any iterable),to the end of the current list"""
# 
# index() """Returns the index of the first element with the specified value"""
# 
# insert() """Adds an element at the specified position"""
# 
# pop() "Removed the element at the specified position"
# 
# remove() "removes the item with the specified value"
# 
# reverse() "Reverses the order of the list"
# 
# sort() "Sort the list"

# # Python Tuples

# A Tuple is a collection which is ordered and unchangeable. in python tuples are writter with round brackets.

# In[79]:


# Create a Tuple.
this_tuple = ("apple","Banana","cherry")
print(this_tuple)


# # Access Tuple items

# You can access tuple items by referring to the index number, inside square brackets

# In[80]:


# Print the Second item in the tuple:

list1 = ("apple","Mango","cherry")
print(list1[1])


# # Negative Indexing

# Negative indexing means beginning from the end, -1 refers to the last item, -2 refes to second last item etc.

# In[82]:


# Print the last item of the tuple:

list2 = ("apple","Banana","cherry")
print(list2[-2])


# # Range of Indexes

# you can specify a range of indexes by specifying where to start and where to end range

# when specifying a range the return value will be a new tuple with the specified items.

# In[83]:


# Return the third, fourth , and fifth item:
list1 = ("apple","Mango","cherry","orange","kiwi","Banana")
print(list1[2:5])


# # Change Tuple Values

# Once a tuple is created, you change its values. Tuples are unchangeable, or immutable as it also is called

# But there is a workaround. You can convert the tuple into a list, cahnge the list, and convert the list back into a tuple

# In[84]:


"""Convert the into a list to able to change it"""
x = ("apple","banana","cherry")
y = list(x)
y[1] = "kiwi"

x = tuple(y)

print(x)


# # Loop Through a Tuple

# You can loop through the tuple items by using a for loop

# iterate through the items and print the value:

# In[87]:


# Iterate the through the items and print the values

list2 = ("apple","banana","charry")
for x in list2:
    print(x)


# # Check if item Exists

# To determine if a specified item is present "in" a tuple the in keyword:

# In[88]:


#Check if "apple" is present in tuple
thistuple = ("apple","Banana","cherry")
if "apple" in thistuple:
    print("yes, 'apple' is in the fruits tuple")# Exists
else:
    print("No, 'apple' is in the fruits tuple")


# # Tuple Length

# To determine how many item a tuple has use the len() method:

# In[89]:


# Print the number of items in the tuple:
list1 = ("yashi","rohit","mangan","shyam")
print(len(list1))


# # Add item

# once a tuple is created, you cannot add items to it. Tuples are unchangeable

# In[90]:


# You cannot add items to a tuple:
list2 = ("apple","banana","cherry","Mango")
list2[3] = "orange" # This will raise an error
print(list2)


# # Create Tuple With One item 

# To create a tuple only one item, you have add a comma after the item ,
# unless python will not recognize the vrriable as a tuple

# In[91]:


# One item tuple, remember the commma:
list3 = ("apple",)
print(type(list3))


# In[92]:


# Not a tuple 
list4 = ("apple")
print(type(list4))


# # Remove Items

# Note : You cannot remove items in tuple.

# Tuples are unchangeable, so you cannot items from it, but you delet the tuple completely
# 

# In[98]:


# the "del" keybord can delete the tuple completely
list0 = ("apple","manga","orange")
del list0
# print(list0)"""this will raise an error therefore the tuple no longer exists"""


# # Join Two Tuples

# To join  two or more tuples you can use the + operator:

# In[99]:


tuple1 = ("apple","Mango","orange","Banana")
tuple2 = (1,2,3,4)
tuple3  = tuple1 + tuple2 #add the tuple
print(tuple3)


# # The tuple() operator:

# It is also possiple to use the tuple() constructor to make a tuple

# In[101]:


# Using the tuple() method to make a tuple
list2 = tuple(("apple","mangao","orange", "Banana")) # note the double round-brackets

print(list2)


# # Tuple Methods 

# Python has two built-in methods that you can use on tuples:
#     
#     
#     count()  '''Returns the number of times a specified value occurs in a tuple'''
#     
#     index()  """Searches the tuple for a specified value and returns the position of where it was found"""

# # python Sets

# A set a collection which is unordered and unindexed. in python sets are written with curly brackets:

# In[1]:


list2 = {"apple","orange","Mango","charry"}
print(list2)


# Note : Set are unordered, so you cannot be sure in which order the items will apper:

# # Access Items

# YOu cannot acces items in a set by referring to an index, since sets are unordered the items has no index.

# But you can loop through the set items using a for loop, or ask if specified value is present in a set, by using the in keyword

# In[2]:


# Loop through the set, print the value:

list2 = {"apple","Mango","charry","Banana"}

for x in list2:
    print(x)


# In[4]:


#Check if "Bnanana" is present the set:
list2 = {"apple","Mango","charry","Banana"}
print("Banana"  in list2)


# # change items

# Once a set created, you connot change its items, but can add new item:

# # ADD Items

# To add one item to set use the Add() method:
# 
# To add more then one item to a set use the update() method:

# In[5]:


#Add an items to a set, using the add() method:

list2 = {"apple","Banana","Mango","charry"}

list2.add("Orange")

print(list2)


# In[6]:


# Add multiple items to a set, using the update() method:
list1 = {"apple","Banana","cherry"}

list1.update(["orange","Mango","grapes"])

print(list1)


# # Get The Length of a set

# To determine how many items a set has, use the len() method:

# In[7]:


# Get the number of items in a set

list1 = {"apple","Banana","charry"}

print(len(list1))


# # Remove Items

# To remove an item in a set, use the remove(), or the discard() method:

# In[8]:


# Removed "Banana" by using remove() method:

list_2 = {"apple","Mango","cherry","Banana"}

list_2.remove("Banana")

print(list_2)


# NOTE : if the items to remove does not exist, "Remove()" will raise an erroe

# In[9]:


# Remove "banana", by using the discard() method:
list_1 = {"apple","Mango","charry","Banana"}

list_1.discard("Banana")

print(list_1)


# NOTE : if the item to remove does not exist, discard() will not raise an error

# You can also use the pop(), method to remove an item, but this method will remove the last item. Remember that set are unordered, so you will not know what item that gets remove

# The return value the pop() method is the remove item:

# In[10]:


# Remove the list item by using the pop() method
list_2 = {"Banana","Mango","charry","apple"}

list_2.pop()

print(list_2)


# NOTE : Set are unordered, so when using the pop() method, you will not know which item that gets removed.

# In[11]:


# The clear() method empties the set:

list_3 = {"apple","Banana","cherry","orange"}

list_3.clear()

print(list_3)


# The "del" keybord will delete the set completely:

# In[16]:


list2 = {"Apple","Mango","chery","Orange"}
del list2
#print(list2)#this will raise an error because the set no longer exists


# # Join two Sets

# there are several ways to join two or more sets in python

# You can use the union() method that returns a new set containing all items from both sets,
# or the update() the inserts all the items one set into another:

# In[19]:


# The union() method eturns a new set with all items from both sets:

set1 = {"apple","ball","catch"}

set2 = {1,2,3}

set3 = set1.union(set2)

print(set3)


# In[25]:


#The update() method inserts the items in set2 into set1

set1 = {"Apple","catch","hear","forgive","forbid"}

set2 = {1,2,3,4,5}

set1.update(set1)

print(set1)


# NOTE : Both union() and update() will exclude any duplicate items.

# There are other methods that joins two sets and keep and ONLY the duplicates, or NEVER the duplicates, check full list of

# # The set() constructor 

# It is also possible to use set() constructor to make a set.

# In[28]:


# Using the set() constructor to make a set:

list_1 = set(("apple","Banana","cherry")) # note the double round-brackets

print(list_1)


# # Set Methods

# 
# add()	Adds an element to the set
# 
# clear()	Removes all the elements from the set
# 
# copy()	Returns a copy of the set
# 
# difference()	Returns a set containing the difference between two or more sets
# 
# difference_update()	Removes the items in this set that are also included in another, specified set
# 
# discard()	Remove the specified item
# 
# intersection()	Returns a set, that is the intersection of two other sets
# 
# intersection_update()Removes the items in this set that are not present in other, specified set(s)
# 
# isdisjoint()	Returns whether two sets have a intersection or not
# 
# issubset()	Returns whether another set contains this set or not
# 
# issuperset()	Returns whether this set contains another set or not
# 
# pop()	Removes an element from the set
# 
# remove()	Removes the specified element
# 
# symmetric_difference()	Returns a set with the symmetric differences of two sets
# 
# symmetric_difference_update()	inserts the symmetric differences from this set and another
# 
# union()	Return a set containing the union of sets
# 
# update()	Update the set with the union of this set and others

# # python Dictionaries

# # Dictionary

# A dictionary is a collection which is unordered, changeable and indexed.
# in python dictionaries are written with curly brackets, and they have keys and value.

# In[1]:


this_dict = {
    "brand":"ford",
    "model" : "mustang",
    "year" : 1964
}

print(this_dict)


# # Accessing Items

# you can access the items of a dictionary by feferring to name, inside square bracket:

# In[4]:


# Get the value of the "model" key:

x = this_dict["year"]
print(x)


# There is also a method called get() that will give you the same result:

# In[5]:


x = this_dict.get("year")
print(x)


# # Chanage Values

# You can change the value of a specific item by referring to its key name:

# In[7]:


# Change the "year" to 2018:

dict1 = {
    "brand":"ford",
    "model" : "mustang",
    "year" : 1964
}

dict1["year"] = 1998

print(dict1)


# # Loop Through a Dictionary

# you can loop through a dictionary by using a for loop.

# When looping through a dictionary, the return value are the keys of the dictionary, but there are method the value as well.

# In[8]:


# Print all key names in the dictionary, one by one.

for x in dict1:
    print(x)


# In[9]:


# Print all value in the dictionary, one by one:

for x in dict1:
    print(dict1[x])


# You can also use the values() function to return value of a dictionary

# In[10]:


for x in dict1.values():
    print(x)


# Loop through both keys and value, by using the items() function:

# In[11]:


for x, y in dict1.items():
    print(x,y)


# # Check if key exists

# To determine if a specified key is present in a dictionary use the in keyword:

# In[12]:


# Check if "model" present in the dictionary:

dict2 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}

if "model" in dict2:
    print("yes, 'model' is one of the keys in the dict2 dictionary" )


# # Dictionary Length

# To determine how many items (key-value pairs) a dictionary

# In[13]:


# Print the number of items in the dictionary:
print(len(dict2))


# # Adding Items

# Adding an item to the dictionary is done by using a new index key and assigning a value

# In[14]:


dict3 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}

dict3["color"] = "red"

print(dict3)


# # Removing Items

# There are several methods to remove items from a dictionary

# The pop() method removed the item with the specified key name

# In[17]:


dict3 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}

dict3.pop("model")

print(dict3)


# The popitem() method removes the last inserted item(in version before 3.7, a random item is removed instead)

# In[19]:


dict3 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}

dict3.popitem()

print(dict3)


# The del keyword removed the item with the specified key name:

# In[24]:


dict3 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}

del dict3["model"]

print(dict3)


# The del keyword can also delete the dictionary completely:
#     

# In[28]:


dict3 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}
del dict3
#print(dict3) # this will cause an error because "dict3" no longer exists


# The clear() keybord empties the dictionary

# In[29]:


dict3 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}

dict3.clear()

print(dict3)


# # copy a Dictionary

# you cannot copy a dictionary simply by typing "dict2 = dict1" , because:
# dict2 will be reference to dict1 and change made in dict1 will automatically also be made in dict2

# There are ways to make a copy, one way is to use the built-in Dictionary method copy()

# In[30]:


# make a copy of a dictionary with the copy() method:

dict3 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}

dict4 = dict3.copy()

print(dict4)


# Another way to make a copy is to use the built-in mathod dict().

# In[31]:


# Make a copy of a dictionary with the dict() method.
dict3 = {
    "brand" : "Ford",
    "model" : "Mustang",
    "year" : 1998
}

dict5 = dict(dict3)

print(dict5)


# # Nested Dictionary

# A dictionary can also contain many dictionary, this is called nested dictionary

# In[34]:


# Create a dictionary that contain three dictionary:
myfamily = {
    "chiled1" : {
        "name" : "Email",
        "year" : 2004
    },
    "child2" : {
        "name" : "yashi",
        "year" : 1997
    },
    "chiled3" : {
        "name" : "shivi",
        "year" : 1998
    }
}
print(myfamily)


# Or, if you want to nest three dictionary that already exists as dictionary

# Create three dictionary, that create one dictionary that will contain the other three dictionary

# In[38]:


child1 = {
    "name" : "Email",
    "year" : 2004
}
child2 = {
    "name" : "yashi",
    "year" : 1997
}
child3 = {
    "name" : "rohit",
    "year" : 1998
}

my_dict = {
    "child1" : child1,
    "child2" : child2,
    "child3" : child3
}
print(my_dict)


# # The dict() Constructor

# it is also possible to use the dict() constructor to make a new dictionary

# In[39]:


thisdict = dict(brand = "ford", model = "yashi",year = 1998)
# NOTE : that keywords are not string literals
# NOTE : that use of equals rather than colon for the assignment
print(thisdict)


# # Dicitonary Methods

# Python has a set of built-in method that you use on dictionary

# clear()	Removes all the elements from the dictionary
# 
# copy()	Returns a copy of the dictionary
# 
# fromkeys()	Returns a dictionary with the specified keys and values
# 
# get()	Returns the value of the specified key
# 
# items()	Returns a list containing a tuple for each key value pair
# 
# keys()	Returns a list containing the dictionary's keys
# 
# pop()	Removes the element with the specified key
# 
# popitem()	Removes the last inserted key-value pair
# 
# setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
#     
# update()	Updates the dictionary with the specified key-value pairs
# 
# values()	Returns a list of all the values in the dictionary

# # Python if ....Else

# # Python conditions and if statements

# Python supports the usual logical conditions from mathematics

# * Equals: a==b
# * Not Equals: a != b
# * Less than: a < b
# * Less than or equal to: a <= b
# * Greater than: a > b
# * Greater than or equal to: a >= b

# These conditions can be used in several ways, most commonly in "if statements" and loops:

# An "if statement" is written by using the if keyword

# In[3]:


# if statment

a = 33
b = 200
if a > b:
    print("b is greater then a")
else:
    print("a is less than b")


# In this example we use two variables, a and b which are used as part of the if statment to test whether b is greater
# then a. As a is 33 and b is 200, we know thar 200 is greater than 33 ,
# and so print to screen that "a is greater than a"

# # Indentation

# python relies on indenatation (whitespace at the beginning of a line) to define scope in the code: Other programming 
# languages often use curly-brackets for this purpose.

# In[8]:


# if statement, without indentation (will raise an error):

a = 33
b = 200

if b > a:
#print("b is grreater than b") you will get an error


# # Elif 

# Te elif keyword is python way of saying "if the previous were not trun, then try this condiction"

# In[1]:


a = 33
b = 33
if a < b:
    print("yes, b is greater than a ")
elif a==b:
    print("yes, a and b are equal")


# # Else

# The else keyword cathes anyhing which ist't caught by the precedng condiction.

# In[2]:


a = 200
b = 33
if a > b:
    print("b is greater than a")
elif a==b:
    print("a and b are equal")
else:
    print("a is greater than b")


# In this example a is greater than b, so the first condiction is not true , also the elif condiction is not true is not true, 
# so we go to the else condition and print scree that"A is greater then B"

# You can aslo have an else without the elif

# In[3]:


a = 200
b = 33
if b > b:
    print("b is greater than a")
else:
    print("a is greater than b")


# # Short Hand if

# If you have only statement to execute, you can put it on the same line as the if statement.

# In[4]:


# one line statement
if a > b: print("a is greater than b")


# # Short Hand if...Else

# if you have only one statement to execute, one for if, and one for else, you can put it all on the same line:

# In[5]:


# one line if else statement 
a = 2
b = 300
print("A") if a > b else print("B")


# In[6]:


# One line if else statement, with 3 condiction:
a = 330
b = 330

print("A") if a > b else print("=") if a==b else print("B")


# # And

# The and keyword is a logical operator, and is used to combine conditional statements:

# In[7]:


# Test if a is greater than b , And if c greater than a:
a = 200
b = 33
c = 500
if a > b and c > a:
    print("Both condictions are True")


# # Or

# The or keyword is a logical operator, and is used to combine conditional statements:

# In[8]:


# test if a is greater than b, or if a is greater than c:
a = 200

b = 33

c = 500
if a > b or a > c:
    print("At least one of the conditions is True")


# # Nested If

# You can have if statement inside if statement, this is called nested if statement.

# In[9]:


x = 40

if x > 10:
    print("Above ten,")
    if x > 20:
        print("and also above 20!")
    else:
        print("but not above 20.")


# # The Pass Statement

# if statement connot be empty, but if you some reason have an if statement an if statement with no content, put in the pass
# statement to avoid getting an error.

# In[10]:


a = 33
b = 200

if b > a:
    pass


# # Python While loops

# # python loops

# python has two primitive loop commands:

# * while loops
# * for loops

# # The while loop

# With the while loop we can execute a set of statements as long as a condition is true.

# In[17]:


# print i as long as i is less than 6:
i = 1
while i < 6:
    print(i)
    #i = i+1
    i += 1


# NOTE: remember to increment i, or else the loop will continue forever

# The while loop reuiers relevant variables to be ready, in this examplr we need to define an indexing variable, i, which
#  we set to 1.

# # The break statement

# with the break statement we can stop the loop even if the while condition is true:

# In[18]:


i = 1 
while i < 6:
    print(i)
    if i == 3:
        break
    i = i+1


# # The continue Statement

# with the continue statement we can stop the current iteration, and continue with the next:

# In[19]:


# Continue to next iteration if i is 3:
i = 0
while i < 6:
    i = i+1
    if i== 3:
        continue
    print(i)


# # The else Dtatement

# with the statement we can run a block of once when the condition no longer is true:

# In[20]:


# print a message once the condition is false:
i = 1
while i < 6:
    print(i)
    i = i+1
else:
    print("i is no longer less than 6")


# # Python For Loops

# A for loop is used for iterating over a sequence (that is either a list,a tuple, a dictionary, a set, or a string)
# 
# this is less like the for keyword in other programming languages, and work more like an iterator method as found in 
# other object-orientated programming languages.
# 
# with the for loop we can execute a set of statement, once for each item in a list, tuple, set etc

# In[21]:


# print each fruit in a fruit list:
fruits = ["apple","orange","Mango","cherrry"]
for x in fruits:
    print(x)


# The for loop does not require an indexing variable to set beforehand.

# # Looping Through a String

# Even string are iterable object, they contain a sequence of character:

# In[22]:


# Loop through the letters in the word "banana"
for x in "banana":
    print(x)


# # The break Statement

# with the break statement we can stop the loop before it has looped through all the items:

# In[23]:


# Exit the loop when x is "banana"
fruits = ["apple","orange","Banana","charry"]
for x in fruits:
    print(x)
    if x == "Banana":
        break


# In[25]:


#Exit the loop when x is "Banana", but this time the break comes before the print:

fruits = ["Apple","cherry","Banana","Orange"]

for x in fruits:
    if x == "Banana":
        break
    print(x)


# # The Continue Statement

# with the contiune statement we can stop the current iteration of the loop, and contiune with the next:

# In[27]:


# Do not print Banana:

fruits = ["Apple","Charry","Banana","Orange"]
for x in fruits:
    if x == "Banana":
        continue
    print(x)


# # The Range() Function

# to loop through a set of code a specified number of times, we can use the range() function,
# 
# The range() function returns a sequence of numbers, staring from 0 by default, and increments by 1 (by default),
# and ends at specified number.

# In[28]:


# Using the range() function:
for x in range(6):
    print(x)


# NOTE : that range(6) is not the value of 0 to 6, but the value 0 to 5

# The range() function default to 0 as a starting value, however it is possiple to specify the starting value by adding a parameter:
#     range(2, 6), which means value from 2 to 6 (but not including 6):

# In[29]:


# Using the start parameter:
for x in range(2, 6):
    print(x)


# The range() function default to increment the sequence by 1, however it is possible to specify the increment value by
# adding a third parameter: range(2, 30, 3)

# In[30]:


#increment the sequence with 3 (default is 1)

for x in range(2, 30, 3):
    print(x)


# # Else in for loop

# The else keyword in a for loop specifies a block of to be executed when the loop is finished:

# In[31]:


# Print all numbers from 0 to 5, and print a message when the loop has ended:
for x in range(6):
    print(x)
else:
    print("Finally Finished!")


# # Nested Loops

# A nested loop is a loop inside a loop.
# 
# The "inner loop" will be executed one time for each iteration of the "outer loop"

# In[32]:


# Print each adjective for every fruit:
adj = ["red", "big", "tasty"]
fruits = ["Apple","Banana","Cherry"]

for x in adj:
    for y in fruits:
        print(x, y)


# # The pass Statement

# for loops cannot be empty, but if you some reason have a for loop with no content, put in the pass statement to
# avoid getting an error

# In[37]:


for x in [0, 1, 2]:
    pass
    print(x)


# # Python Functions

# A function is a block of code which only runs when it is called

# you can pass data, known as parameters, into a function.

# A function can return data as a result.

# # Creating a Function

# in python a function is defined using the def keyword

# In[1]:


def my_function():
    print("Hello world!")


# # Calling a Function

# In[2]:


# To call a function, use the function name follwoed by parenthesis

def my_function():
    print("Hello from a function")
    
my_function()


# # Arguments

# Information can be passed into function as arguments.
# 
# Arguments are specified sfter the function name , inside the parentheses.
# You can add as many arguments as you want, just separate them a comma.
# 
# The folloeing example has a function with one argument (fname).
# when the function is called, we pass along a first name,
# which is used inside the function to printthe full name:

# In[4]:


def my_function(fname):
    print(fname + "refsnes")
    
my_function("Email ")
my_function("tobias ")
my_function("Linus ")


# Arguments are often shortened to arge in python documentation.
# 

# # parameters or Arguments?

# The terms parameter and argument can be used for the same thing:
# information that are passed into a function.

# From a function's perspective 

# A parameter is the variable listed inside the parentheses in the function definition

# An argument is the value that are sent to the function when it is called.

# # Number of Arguments

# By default, a function must be called with the correct number of arguments.
# Meaning that if you function expects 2 arguments, you have to call the function with 2 arguments,nit more , and not less
# 

# In[5]:


# This function expects 2 arguments, and gets 2 arguments:
def my_function(fname, lname):
    print(fname +" "+lname)
    
my_function("Email","Refsnes")


# if you try to call the function with a or 3 arguments, you will get an error.

# In[7]:


# This function expects 2 arguments, but gets only 1
def my_function(fname,lname):
    print(fname +" "+lname)
    
#my_function("Email") error pass 2 arguments, not one


# # Arbitrary Arguments, *args

# if you do not know how many arguments that will be passed into your function,
# add a * before the parameter name in the function definition.

# This way the function will receive a tuple of arguments, and can access the items accordingly:

# In[10]:


# if the number of arguments is unknown , add a * before the parameter name:

def my_function(*kids):
    print("The youngest child is " + kids[2])
    
my_function("Email","Tobias","Linus")


# Arbitrary Arguments are often shortened to *args in python documentation

# # Keyword Arguments

# You can also send arguments with the key=value syntax.
# 
# This way the order of the arguments does not matter.

# In[11]:


def my_function(child3, child2, child1):
    print("The youngest child is " + child3)
    
my_function(child1 = "Email", child2 = "Tobias", child3 = "Linus")


# The phrase keyword Arguments are often shortened to kwargs in python documentations.

# # Arbitrary keyword Arguments, **kwargs

# if you do not know how many keyword arguments that will be passed into your function,
# add two asterisk: **before the parameter name in the function definition.

# This way the function will receive a dictionary of arguments, and access the items accordingly:

# In[12]:


# if the numebr of keyword arguments is unknown, add a double ** before the parameter name:
def my_function(**kid):
    print("His last name is " +kid["lname"])
    
my_function(fname = "Email", lname = "Address")


# Arbitrary kword Arguments are often shortened to **kwargs in python documentation.

# # Default Parameter value

# The following example shows how to use a default parameter value.
# 
# if we call the function without argument, it uses the value:

# In[14]:


def my_function(country = "Norway"):
    print("I am from " + country)
    
my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")


# # Passing a List as an Argument

# You can send any data types of argument to a function (String, number,list,dictionary etc),
# and same data type inside the function.

# E.g. if you send a list as argument, it will still be a list when it reaches the function:

# In[16]:


def my_function(food):
    for x in food:
        print(x)
        
fruits = ["Apple","Banana","Orange","Charry"]

my_function(fruits)


# # Return Values

# To let a function return a value, use the return statement:

# In[17]:


def my_function(x):
    return 5 * x


print(my_function(3))
print(my_function(4))
print(my_function(5))


# # The Pass Statement 

# function definition cannot be empty, but if you for some reason have a function definition with no content, put in
# the pass statement to avoid getting an error.

# In[18]:


def my_function():
    pass


# # Recursion 

# Python also accepts function recursion, which means a defined function can call itself.

# Recursion is acommom mathematical and programming concept. it means that a function call. itself. This has the benefit of meaning that you can loop through data to reach a result.

# The developer should be very careful with recursion as can be quite easy to slip into writing a function which never terminates, or one that use excess amount of memory or processor power.
# however, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.

# In this example, tri_recursion() is a function that we have defined to call itself (recurse). we use the "k" variable as the data, which decrements (-1) every time we recurse. The recursion ends the condition is not greater than 0 (i.e. when it is 0)

# To a new developer it can take some time to work out how exactly this works, best way to find out is testing and modifying it.

# In[19]:


# Recursion Example

def tri_recursion(k):
    if(k>0):
        result = k+tri_recursion(k-1)
        print(result)
    else:
        result = 0
    return result
print("\n\n Recursion Example Results")
tri_recursion(6)


# # Python Lambda

# A lambda function is a small anonymous function

# A lambda function can take any number of arguments, but can only have one expression

# # Syntax

# lambda arguments : expression

# The expression is executed and the resulkt is returned:

# A lambda function that adds 10 to the number passed in as argument, and print the result:

# In[20]:


x = lambda a : a + 10
print(x(5))


# lambda function can take any number of arguments:

# In[22]:


# A lambda function that multiplies argument a with argument b and print the result:
x = lambda a, b : a * b

print(x(5,6))


# In[23]:


# A lambda function that sums argument a,b, and c and print the result:
x = lambda a,b,c : a+b+c

print(x(5,10,20))


# # Why use Lambda Function

# The power of lambda is better when you use them as an anonymous function inside snother function.

# say you have a function definitio  that take one argument that argument will be multiplied an unknown number

# In[24]:


def my_function(n):
    return lambda a : a*n


# Use that function definition to make a function that always doubles the number you send in:

# In[33]:


def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(11))


# Or, use the same function definition to make a function that always triples the number you send in :

# In[34]:


def my_fun(n):
    return lambda a : a * n

my_tripler_number = my_fun(3)

print(my_tripler_number(11))


# Or, use the same function definition to make both function, in the same program:

# In[35]:


def my_function(n):
    return lambda a : a * n
my_dub = my_function(2)
my_trip = my_function(3)

print(my_dub(11))
print(my_trip(11))


# Use lambda function when an anonymous function is required for a short period of time.

# # Python Arrays

# NOTE : Python does not have built-in support Arrays, but Python Lists can be used instead

# # Arrays 

# Arrays are used to store multiple value in one single variable

# In[36]:


# Create an array contining car names

car  = ["Ford", "Volvo", "BMW"]


# # What is an Array?

# An array is a pecial variable, which can hold more then one value at a time 
# 
# if you have a list of items(a list of car names, for example), storing the cars in single variables could look like this:

# In[37]:


car1 = "Ford"
car2 = "Volvo"
car3 = "BMW"


# However, what if want to loop through the cars and find a specific one ? And what if you had not 3 cas, but 300?

# The solution is an array!

# An array can hold many value under a single name, and you can access the value by referring to an index number.

# # Access the Elements of an Array

# You refer to an array element by referring to index number.

# In[39]:


# Get the value of the first array item.
x = car[0]
print(x)


# In[40]:


# Modify the value the first array item:
car[0] = "ToyOta"

print(car)


# # The Length of an Array

# Use the "len()" method to return the length of an array (the number of element in ab array)

# In[42]:


x = len(car)
print(x)


# NOTE : The length of an array is always one more than the highest array index.

# # Looping Array Elements

# you can use the "for in " loop to loop through all the elements of an array.

# In[43]:


# print each item in the cars array:

for x in car:
    print(x)


# # Adding Array Elements

# you can use the "append()" method to add an element th an array:

# In[44]:


# Add one more element to the cares array:

car.append("Honda")


# In[45]:


print(car)


# # Removing Array Elements

# You can use the pop() method to remove an element from the array.

# In[46]:


# Delete the second element of the cars array:
car.pop(1)


# In[47]:


print(car)


# You can also use the remove() method to remove an element from the array.

# In[49]:


# Delete the element that has the value "Volvo"

# car.remove("Volvo")


# NOTE : The list's remove() method anly removes the first occurrence of the specified value.

# # Array Methods

# Python has a set of bulit-in methods that you can use on lists/arrays

# 
# append()	Adds an element at the end of the list
# 
# clear()	Removes all the elements from the list
# 
# copy()	Returns a copy of the list
# 
# count()	Returns the number of elements with the specified value
# 
# extend()	Add the elements of a list (or any iterable), to the end of the current list
# 
# index()	Returns the index of the first element with the specified value
# 
# insert()	Adds an element at the specified position
# 
# pop()	Removes the element at the specified position
# 
# remove()	Removes the first item with the specified value
# 
# reverse()	Reverses the order of the list
# 
# sort()	Sorts the list

# In[50]:


cars = ["Honda","Hero","Bmw","Lombogni"]


# In[52]:


cars.append("toyota")

print(cars)


# In[53]:


car = cars.copy()
print(car)


# In[61]:


cars.remove("toyota")
print(cars)


# In[63]:


c = cars.count("toyota")
print(c)


# In[ ]:





# In[66]:


print(cars)


# In[70]:


cars.clear()
print(cars)


# In[72]:


point = [1,2,3,4,5,6]
car.extend(point)
print(car)


# In[73]:


tum = ['Honda', 'Hero', 'Bmw', 'Lombogni', 'toyota']


# In[74]:


cars.append(tum)
print(cars)


# In[75]:


tum = ["jikcar","somo","lite","sisu"]


# In[76]:


cars.extend(tum)
print(cars)


# In[87]:


c = car.index("Hero")
print(c)


# In[88]:


print(cars)


# In[89]:


cr = cars.index("somo")
print(cr)


# In[95]:


cars.insert(0,"jemo")
print(cars)


# In[96]:


car.insert(1,"Jemo")


# In[97]:


print(car)


# In[98]:


car.pop(1)
print(car)


# In[99]:


car.remove("Bmw")
print(car)


# In[100]:


car.reverse()
print(car)


# In[101]:


point.sort()
print(point)


# # Python Classes and Objects

# # Python classes/ Objects

# Python is an object oriented programmming language.
# 
# Almost everything in python is an object, with its properties and method.
# 
# A Class is like an object constructor, or a "blueprint" for creating object

# # Create a Class

# To create a class , use keyword class:

# In[104]:


# Create a Class named my with a property named x:
class my_class:
    x = 5


# # create Object

# Now we can use the class named my_Class to create Objects:

# In[105]:


# Create an object named p1,and print the value of x:
p1 = my_class()
print(p1.x)


# # The _init_() function

# The examples above are classes and object in their simplest from, and are not really useful in real life application.

# To understand the meaning of classes we have to understand the built-in _init_() function

# All classes have a function called _init_(), which is always executed when the class is being initiated.

# Use the _init_() function to assige value to object properties, or other operation that are necessary to do when the object is being created:

# In[109]:


# Create a class named person, use the _init_() function to assing value for name and age:

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
p2 = Person("john", 36)

print(p2.name)
print(p2.age)


# NOTE : The __init__() function is called automatically every time the class is being used to create a new object.

# # Object Methods 

# Objects can contain method. methods in objects are function that belong to the object.

# Let us create a method in the Person class:

# Insert a function that print a greeting, and execute it on the p1 object

# In[115]:


class preson:
    def __init__(self, name,age):
        self.name = name
        self.age = age
    def my_function(self):
        print("Hello my name is " + self.name,"my age is ",self.age)
        
        
p1 = preson("Rohit", 21)
p1.my_function()


# NOTE : The self parameter is a reference to the current instance of the class, and is used to access varibles that belong to the class.

# # The Self Parameter

# The self parameter  is a reference to the current instance of the class, and is used to access varibles that belongs to the class.

# it does not have to named self , you can call it whaatever you like, but it has first parameter of of any function in the class:

# In[121]:


# Use the words mysillyobject and abc instead of self:

class Person:
    def __init__(mysillyobject, name, age):
        
        mysillyobject.name  = name
        mysillyobject.age = age
        
    def myfun(abc):
        print("Hello my name is " + abc.name)
        
p1 = Person("John", 36)

p1.myfun()
    
    
     


# In[122]:


class Person:
    def __init__(mysillyobject, name, age):
        mysillyobject.name = name
        mysillyobject.age = age

    def myfunc(abc):
        print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()


# # Modify Object Properties 

# you can modify properties on objects like this:

# In[123]:


# Set the age of p1 to 40:

p1.age = 40


# # Delete Object Properties

# you can delate properties on obje ts by using the del keyword

# Delete the age property from the p1 object:

# In[124]:


del p1.age


# # Delete Objects

# you can delete object by using the del keyword

# In[125]:


# Delete the p1 object:

del p1


# # The pass Statement

# Class definitions cannot be empty, but if you for some reason have a class definition with no content, put in the pass

# In[126]:


class Person:
    pass


# # Python Inheritance

# Inheritance allows us to define a class that inherits all the method and properties from another class.

# Parent cl.ass is the class being inherited from, also called base class

# Child class is the class that inherits from another class, called derived class

# # Create a parent Class

# Any class can be a parent class, so the syntax is the same as creating any other class:

# Create a class named Person, with firstname and lastname properties, and a printname method:

# In[129]:


class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname
        
def printname(self):
    print(self.firstname,self.lastname)
    
# Use the person class to create an object, and then execute the printname method

x = Person("john", "Doe")

x.printname()


# In[132]:


class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname

    def printname(self):
         print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()


# Create a class that inherits the functionaliy from another class,send the parent class as a parameter when creating the child class:

# In[133]:


# Create a class named Student , which will inherit the properties and methods from the Person class:
class Student(Person):
    pass


# NOTE : Use the pass keyword when you do not want to add other properties to the class.

# Now the Student class has the same properties and methods as the Person class.

# In[134]:


# Use the Student class to create an object, and then execute the printname method:
x = Student("Mike", "Olsen")

x.printname()


# # Add the __init__() Function

# So far we have create a child class that inherits the properties and methods from its parent.
# 
# We want to add the __init__() function to the child class (insteat of the pass keyword)

# NOTE : __init__() function is called automatically every time the class is being used to create a new object.

# In[137]:


# Add the __init__() function to the Student class:

class student(Person):
    def __init__(self, fnane, lname):
        


# In[141]:


class Student(Person):
    def __init__(self, fname, lname):
        #add properties etc.


# when you add the __init__() function, the chiled class no longer inherit the parent's __init__() function.

# NOTE : The child's __init__() function overrides the inheritance of the parent's __init__() function

# To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function:

# In[142]:


class Student(Person):
    def __init__(self,fname,lname):
        Person.__init__(self, fname, lname)


# Now we have successfully added the __init__() function, and kept the inheritance of the parent class, and we are ready to add functionality in the __init__() function.

# # Use the super() Function

# Python also has a super() function that will make the child class inherit all the method and properties from its parent

# In[143]:


class Student(Person):
    def __init__(self, fname, lname):
        super().__init__(fname,lanme)


# By using the super() function, you do not have to use the name of the parent element, it will automatically inheritbthe methods and properties from its parent.

# # Add Properties

# In[144]:


#  Add property called graduationyer to the Student class:

class Student(Person):
    def __init__(self, fname, lname):
        super().__init__(fname,lname)
        self.graduationyear = 2019


# In the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects. To do so, add another parameter in the __init__() function:

# In[149]:


# Add year parameter, and pass the correct year when creating object:

class Student(Person):
    def __init__(self,fname,lname):
        super().__init__(fname,lanme)
        self.graduationyear = year
        
#x = Student("yashi","Mangan",2019)


# In[151]:


class Student(Person):
    def __init__(self, fname, lname, year):
        super().__init__(fname, lname)
        self.graduationyear = year

x = Student("yashi", "Mangan", 2019)


# # Add Methods

# Add a method called welcome to the Student class:

# In[152]:


class Student(Person):
    def __init__(self, fname, lname, year):
        super().__init__(fname, lname)
        self.graduationyear = year
        
    def welcome(self):
        print("welcome",self.firstname, self.lastname, "to the class of ", self.graduationyear)


# if you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden.

# # Python Iterators

# An iteration is an object that countable number of value.
# 
# An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.
# 
# Technically, in python an iterator is an object which implements the iterator protocol, which consist of the method "__iter__()"
# and ("__next__()")

# # Iterator vs Iterable

# Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.

# All these objects have a iter() method which is used to get an iterator:

# In[153]:


# Return an iterator from a tuple, and print each value:

my_tuple = ("apple","Banana","cherry")

myit = iter(my_tuple)
print(next(myit))
print(next(myit))
print(next(myit))


# Even String are iterable object, and can return an iterator:

# In[154]:


# String are also iterable object, containing a sequence of characters:
mystr = "banana"

myit = iter(mystr)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))


# # Looping Through an Iterator

# we can also use a for loop to iterate through an iterable object:

# In[155]:


# iterate the value of a tuple:

mytuple = ("apple","Banana","cherry")
for x in mytuple:
    print(x)


# In[156]:


# Iterate the characters of a string:

mystr = "Banana"

for x in mystr:
    print(x)


# The for loop actually creates an iteates an iterator object and executes the next() method for each loop.

# # Create an Iterator 

# To create an object/class as an iterator you have to implement the method __iter__() and __next__() to your object.

# As you have learned in the python Classes/Objects chapter, all classes have a function called __init__(), which allows you do some initializing when the object is being created.

# The __iter__() mathod acts similar,you can do operation(initializing etc.)but must always return iterator object itself.

# The __next__() method also allows you to do operations, and must return the next item in the sequence.

# In[161]:


# Create an iterator that returns numbers, string with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc):


    
class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self

    def __next__(self):
        x = self.a
        self.a += 1
        return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))


# # Stoplteration

# The example above would continue forever if you enough next() statements, or if it was used in a for loop.

# To prevent the iteration to go on forever, we can use the StopIteration statment.
# 
# In the __next__() method, we can add a terminating condition to rasie an error if the iteration is done a specified number of times:

# In[172]:


# Stop after 20 iteration:

class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self
    def __next__(self):
        if self.a <= 20:
            x = self.a
            self.a += 1
            return x
        else:
            raise StopIteration
            
myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
    print(x)


# In[165]:


class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self

    def __next__(self):
        if self.a <= 20:
            x = self.a
            self.a += 1
            return x
        else:
            raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
    print(x)


# # Python Scope

# A varibles is only avilable from inside the resion it is created. this is called Scope

# In[175]:


# A variable created inside a function is available that function:
def my_function():
    x = 30
    print(x)
    
my_function()


# # Function inside function

# As explaine in the example above, the variable x is not available the function, but it is availble for any function inside the function:

# In[176]:


# The local variable can be accessed from a function the function
def myfunction():
    x = 20
    def mylocal():
        print(x)
    mylocal()
    
myfunction()


# # Global Scope

# A variable created in the main body of the python code is a global variable and belongs to the global scope.

# Global variables are available from within any scope, global and local.
# 

# In[177]:


# A variable created outside of a function is global and can be used by anyone:
 
x = 300

def myfunc():
    print(x)
    
myfunc()

print(x)


# # Naming variable
if you operate with same varible name inside and outside of a function, python will treat them as two separate varibles, one available in the global scope(outside the function) and one available in the local scope (inside the function)
# In[178]:


# the function will print the local x, and then the code will print the global x:
x = 300

def myfun():
    x = 200
    print(x)
    
myfun()
print(x)


# # Global Keyword

# if you need to create a globle varibale, but are stuck in local scope you can use the global keyword 
# 
# The global keyword make the variable global.

# if you use the global  keyword, the varibale belongs to global scope:

# In[179]:


def myfunc():
    global x
    x = 300
    
myfunc()
print(x)


# Also, use the global keyword if you want to make a change to global variabal inside a function.

# In[180]:


# To change the value of a global variable inside a function, refer to the variable by using the global keyword:

x = 300

def myfunction():
    global x 
    x = 200
    
myfunction()

print(x)


# # Python Modules

# # What is modules

# conside a module to be the same as a code library
# 
# 
# A file containing a set function you want to include in you applecation

# # Create a Module 

# To create a module just save code you want in a file with the file extension ".py"

# In[181]:


# Save this code in a file named mymodule.py
def greeting(name):
    print("Hello " + name)


# # Use a Module

# Now we can use the module we just created, by using the import atatement:

# In[187]:


# import the module named mymodule, and call the greeting function:

import mymodule

mymodule.greeting("yashi")###########################


# NOTE : when using a function from a module, use the syntax: module_name.function_name

# # Variables in Module

# The module can contain function, as already described, but also varibale of all type (arrays, dictionaries, object etc):

# In[188]:


# Save this code in the file mymodule.py

preson1 = {
    "name" : "yashi",
    "age" : 21,
    "country" : "Indian"
}


# In[197]:


# import the module named preson, and access the preson1 dictionary:
import parson

a = parson.preson1["age"]
print(a)######################################


# # Naming a Module

# you can name the module file whatever you like, but it must have the file extension".py"

# # Re-Naming a Module

# you can create an alian when you import a module, by using the as keyword:

# In[195]:


# Create an alias for mymodule called mx:
import parson as mx

a = mx.person1["age"]

print(a)


# # Built-in Modules

# There are several built-in modules in python, which you can import whenever you like.

# In[193]:


# Import and use the pltfrom module:

import platfrom

x = platfrom.system()
print(x)#############################


# # Using the Dir() Function

# There is a built function to list all the function names(or varible names) in a module. The "dir()" function:

# In[199]:


import parson as mx

x = dir(parson)

print(x)


# In[200]:


import platform

x = dir(platfrom)
print(x)


# NOTE : The dir() function can be used on all modules, also the ones you create yourself.

# # Import From Module

# you can chooes to import only parts from a module, by using the from keyword.

# In[201]:


# the module named mymodule has one function and one dictionary:

def greeting(name):
    print("Hello, " + name)
    
person1 = {
    "Name" : "yashi",
    "age" : 21,
    "country" : "Indian"
}


# In[202]:


from mymodule import person1

print(person1["age"])


# NOTE : when importing using the from keyword, do not the module name when referring to elements in the module.
# 
# Example : person1["age"], not mymodule.person1["age"]

# # Python Datetime

# #A dat in python is not a date of its own, but can import a module named datetimr to work dates as date object.

# In[207]:


# Import the datetime module nad display the current date:
import datetime


# In[208]:


x = datetime.datetime.now()
print(x)


# # Date Output

# when we execute the code from the example above the result will be:
#     
# The date contains year, month, day, hour, minute, and microsecond.
# 
# the datetime module has many methods to return information about the date object:
# 
# Here are a few examples, you will learn about them later in this chapter:

# In[209]:


# Return the year and name of weekday:

import datetime

x = datetime.datetime.now()
print(x.year)
print(x.strftime("%A"))


# # Creating Date Objects

# To create a date, we can use the datetime() class (constructor) of the datetime module.
# 
# The datetime() class requires three parameters to create a date: year, month, day.

# In[210]:


# Create a date object:

import datetime

x = datetime.datetime(2020, 2, 2)

print(x)


# The datetime class also takes parameters for time and timezone(hour, minute, second, microsecond, tzone), butthey are optional, and has a default value of 0,(None for timezone)

# # The strftime() Method

# The datetime object has a method for formatting object into readable string.
# 
# The method is called Strftime(). and take one parameter. format. to specify the format of the return string:

# In[211]:


# Display The name of the month:

import datetime

x = datetime.datetime(2018, 6, 1)

print(x.strftime("%B"))


# Directive	Description	Example
# %a	Weekday, short version	Wed	
# 
# %A	Weekday, full version	Wednesday	
# 
# %w	Weekday as a number 0-6, 0 is Sunday	3	
# 
# %d	Day of month 01-31	31	
# 
# %b	Month name, short version	Dec	
# 
# %B	Month name, full version	December	
# 
# %m	Month as a number 01-12	12	
# 
# %y	Year, short version, without century	18	
# 
# %Y	Year, full version	2018	
# 
# %H	Hour 00-23	17	
# 
# %I	Hour 00-12	05	
# 
# %p	AM/PM	PM	
# 
# %M	Minute 00-59	41	
# 
# %S	Second 00-59	08	
# 
# %f	Microsecond 000000-999999	548513	
# 
# %z	UTC offset	+0100	
# 
# %Z	Timezone	CST	
# 
# %j	Day number of year 001-366	365	
# 
# %U	Week number of year, Sunday as the first day of week, 00-53	52	
# 
# %W	Week number of year, Monday as the first day of week, 00-53	52	
# 
# %c	Local version of date and time	Mon Dec 31 17:41:00 2018	
# 
# %x	Local version of date	12/31/18	
# 
# %X	Local version of time	17:41:00	
# 
# %%	A % character	%

# # Python JSON

# JSON is a syntax for storing and exchanging data.
# 
# JSON is text, write with JavaScript notation

# # JSON in Python

# Python has a built-in package called json, which can ba used to work with JSON date.

# In[212]:


# Import the json module:

import json


# # Parse json- Convert from Json to Pyrhon

# if you have a JSON string can parse it by using the json.loads() method.

# In[213]:


import json 

# some json 
x  = '{"name":"yashi","age":21, "city":"rampur"}'

# parse X:

y = json.loads(x)

# the result is a python dictionary:

print(y["age"])


# # Convert from Python to json

# If you have a Python object, you can convert it into a json string by ising the json.dumps() method.

# In[214]:


# Convert from Python to JSON:

import json 

# a python object (dict):

x = {
    "name":"yashi",
    "age" : 21,
    "city" : "rampur"
}

# convert into json

y = json.dumps(x)

print(y)


# In[215]:


import json

print(json.dumps({"name": "John", "age": 30}))
print(json.dumps(["apple", "bananas"]))
print(json.dumps(("apple", "bananas")))
print(json.dumps("hello"))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))


# Convert a python object contaning all the legal data types:

# In[216]:


import json

x = {
    "name" : "yashi",
    "age" : 21,
    "married" : True,
    "Divorced" : False,
    "children" : ("ricardo Hazari","yashaswini Hazari"),
    "pets" : None,
    "cars" : [
        {"model" : "BMW 230", "mpg" : 27.5},
        {"model" : "Ford Edge", "mpg" : 24.1}
    ]
}

print(json.dumps(x))


# # Formate the Result

# The example above prints a json string, but it is not very easy to read, with no indentation and line breaks.

# The json.dumps() method has parameters to make it easier to read the result:

# In[217]:


# Use the indent parameter to define the number of indents:

json.dumps(x, indent=4)


# you can also define the separators, default value(",",":"), which means using a comma and spece to separete each object and a colon and a space to separate keys from value:

# In[219]:


# Use the separators parameter to change the default separator:

json.dumps(x, indent=4, separators=(". "," = "))


# # Order the result

# The json.dumps() method has parameters to order the keys in the result:

# In[220]:


# Use the sort_keys parameter to specify of the result should be sorted or not:

json.dumps(x, indent=4, sort_keys=True)


# # Python RegEx

# A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern
# 
# RegEx can be used to check if a string contains the specified search pattern.

# # RegEx Module

# Python has built-in package called re, which can be used to work with Regular Expressions.
# import the module:

# In[221]:


import re


# # RegEx in python

# When you have imported the re module, yoy string using regular expressions:

# In[223]:


# Search the string to see if it start "The and ends with "Spain"

import re

txt = "The rain in Spain"

x = re.search("^The.*Spain$", txt)
print(x)


# # RegEx Function

# The re module offers a set of function that allows us to search a string for a match:

# findall	Returns a list containing all matches
# 
# search	Returns a Match object if there is a match anywhere in the string
# 
# split	Returns a list where the string has been split at each match
# 
# sub	Replaces one or many matches with a string

# # Metacharacters

# Metacharacters are characters with a special meanimg:

# []	A set of characters	"[a-m]"	
# 
# \	Signals a special sequence (can also be used to escape special characters)	"\d"	
# 
# .	Any character (except newline character)	"he..o"	
# 
# ^	Starts with	"^hello"	
# 
# $	Ends with	"world$"	
# 
# *	Zero or more occurrences	"aix*"	
# 
# +	One or more occurrences	"aix+"	
# 
# {}	Exactly the specified number of occurrences	"al{2}"	
# 
# |	Either or	"falls|stays"	
# 
# ()	Capture and group	 

# In[225]:


import re

txt = "The rain in spain"

# Find all lower case charaters alphabetically between "a" "m":

x = re.findall("[a-m]",txt)

print(x)


# In[226]:


import re

txt = "My wife is yashi,age 21 "

# find all digite characters:

x = re.findall("\d",txt)

print(x)


# In[227]:


import re 

txt = "hello world"
# Search for a sequence that staets with "he", follwed by two (any)characters, and an "o"

x = re.findall("he..o",txt)
print(x)


# In[229]:


import re

txt = "hello world"

# Check if the string string starts with 'hello':

x = re.findall("^hello",txt)
if (x):
    print("yes, the string starts with 'hello'")
else:
    print("No match")


# In[230]:


import re 

txt = "hello world"

# Check if the string ends with "world"

x = re.findall("world$",txt)

if (x):
    print("yes, the string ends with 'world'")
    
else:
    print("No,the string ends with 'world'")


# In[231]:


import re 

txt = "The rain in Spain falls mainly in the plain!"

# Check if the string contains "ai"follwed by 1 or more "x" characters:

x = re.findall("aix+",txt)

print(x)

if (x):
    print("yes, there is at lest one match")
else:
    print("No, there is at lest one not match")


# In[233]:


import re

txt = "The rain in Spain falls mainly in the plain!"

# Check if the string contains "a" followed by exactly two "l"

x = re.findall("al{2}",txt)

print(x)

if (x):
    print("yes, there is at least one match!")
else:
    print("No, there is at least no match")


# In[234]:


import re 

txt = "The rain in Spain falls mainly in  the plain!"

#Check if the string contains either "falls" or "stays"

x = re.findall("falls|stays",txt)

print(x)

if (x):
    print("yes, there are at least one match!")
else:
    print("No,there are not match")


# # Special Sequences

# In[238]:


"""\A	Returns a match if the specified characters are at the beginning of the string	"\AThe" """

import re 

txt = "The rain in Spain"

# Check if the string starts with "The"

x = re.findall("\AThe",txt)

print(x)

if (x):
    print("yes, there is a match!")
else:
    print("NO, there isn't a match")


# In[1]:


"""\b	Returns a match where the specified characters are at the beginning or at the end of a word	r"\bain"
r"ain\b"""
import re

txt = "The rain in Spain"
# chack if "ain" is present at the beginning of a word:

x = re.findall(r"\bain", txt)
print(x)

if x:
    print("yes,there is at last one match")
else:
    print("NO, there isn't at last one match")


# In[3]:


"""\B	Returns a match where the specified characters are present, but NOT at the beginning (or at the end) of a word	r"\Bain"
r"ain\B"""

import re 

txt = "The rain in Spain"
# Check if "ain" is present at the end of a word:

x = re.findall(r"ain\b",txt)
print(x)

if (x):
    print("Yes, there is at last one match!")
else:
    print("NO, there is at loat not one match")


# In[4]:


import re

txt = "we are my life"

# Check if "ife" is present at the beginning of a 

x = re.findall(r"\aife",txt)
print(x)

if x:
    print("Yes, there is at least one match!")
else:
    print("No, there is at least one not match")


# In[6]:


import re

txt = "the rain in Spain"

# check if "ain" is present, but Not at the end of  a word:

x = re.findall(r"ain\B",txt)

print(x)
if x:
    print("yes, there is at least one match")
else:
    print("No , there is not at least match")


# In[7]:


import re

txt = "The rain in Spain"

# check if"ain" is present , but not at the beginning of a word:

x = re.findall(r"\Bain",txt)
print(x)

if x:
    print("yes, there is at least one match")
else:
    print("no, there is not at least match!")


# In[8]:


import re 

txt = "the rain in Spain"

# check if the string contains any digite (number from 0 to 9):

x = re.findall("\d",txt)

print(x)

if x:
    print("yes, there is at least one match!")
else:
    print("No, there is not at least one match!")


# In[9]:


import re

txt = "The rain in Spain"

# Return a match at every no-digit character:

x = re.findall("\D",txt)

print(x)

if x:
    print("yes, there is at least one match!")
else:
    print("no, there is not at least one match")


# In[10]:


import re 

txt = "The rain in Spain"

# return a match at every wite-soace character:
x = re.findall("\s",txt)

print(x)

if x:
    print("yes , there is at least one match")
else:
    print("No, there is no at least match")


# In[11]:


import re 

txt = "The rain in Spain"

# Return a match every non wite-space character:

x = re.findall("\S",txt)
print(x)

if x:
    print("yes, there is at least one match!")
else:
    print("No, there is not at least match!")


# In[13]:


import re 

txt  = "The rain in Spain"

# Return a match at every word character (Character from a to Z) digits from0 to 9 and the underscore_character

x = re.findall("\W",txt)

print(x)
if x:
    print("yes , There is at least one match!")
else:
    print("NO, , There is not at least match!")


# In[15]:


import re 

txt  = "The rain in Spain"

#Return a match at every word character (characters from a to Z, digits from 0-9, and the underscore _ character):

x = re.findall("\w",txt)

print(x)
if x:
    print("yes , There is at least one match!")
else:
    print("NO, , There is not at least match!")


# In[16]:


import re 

txt = "The rain in Spain"

# check if the string ends with "Spain"

x = re.findall("Spain\Z",txt)

print(x)

if x :
    print("yes , match")
else:
    print("No , match")


# In[17]:


import re 

txt = "The rain in Spain"
# Check if the String has any a, r, or n characters:
x = re.findall("[arn]",txt)
print(x)
if x :
    print("yes, there is at least one match")
else:
    print("No, There is not at least one match")


# In[1]:


import re 

txt = "The rain in Spain"
# Check if the String has any character between a and n:
x  = re.findall("[a-n]",txt)

print(x)

if(x):
    print("Yes, there is at least one match!")
    
else:
    print("No, there is not at least one match")


# In[6]:


import re

txt = "The rain in Spin"
# Check if the String has other characters than ,a,r,or n:

x = re.findall("[^arn]",txt)

print(x)
if x:
    print("Yes, there is at least one match!")
else:
    print("No, there is not at least one match")


# In[7]:


import re

txt = "The rain in Spain"
# Check if the string has any 0, 1,2, or 3 digits:

x = re.findall("[0123]",txt)

print(x)

if x:
    print("yes, there is at least one match")
else:
    print("No, There is not at least one match")


# In[8]:


import re 

txt = "8 time before 11:45 AM"
# Check if the string has any digit

x = re.findall("[0-9]",txt)
print(x)

if x:
    print("Yes , there is at least one match")
else:
    print("No, there is not at least match")


# In[9]:


import re 

txt = "8 time before 11:45 AM"

# Check if the string has any two-digit number, from 00 to 59:

x = re.findall("[0-5][0-9]",txt)

print(x)

if x:
    print("yes, there is at least one match")
else:
    print("No, there is not match")


# In[10]:


import re 

txt = "8 time before 11:45 AM"
# Check if the string has characters from a to z lower A to Z upper case:

x = re.findall("[a-zA-Z]",txt)

print(x)

if x:
    print("Yes, there ia at least one match!")
else:
    print("No, there is not at least match!")


# In[11]:


import re 

txt = "8 times before 11:45 AM"

x = re.findall("[+]",txt)

print(x)
if x:
    print("yes, there is at lest match!")
else:
    print("no , there is not match")


# # The findall() Function

# The findall() function return a list containing all matches:

# In[12]:


# print a list all matches

import re 

txt = "The rain in Spain"
x = re.findall("ai",txt)
print(x)


# The list contains the matches inthe order they are found.
# 
# if no matches are found an empty list is returned

# In[13]:


# Return an empty list if no match was found:

import re

txt = "The rain in Spain"

x = re.findall("Portugal",txt)

print(x)


# # The Search() Function

# The search() function searches the string for a match and return a match object if there is a match.
# 

# if there is more than one match, only first occurrence of the match will be returned:

# In[14]:


# Search for the first white-space character in the string:

import re

txt = "The rain in Spain"
x = re.search("\s",txt)

print("The first white-space character is located in position:",x.start())


# if no matches are found, the value None is returned:

# In[15]:


# Make a search that returns no match:

import re

txt = "The rain in Spain"
x = re.search("Portugal",txt)

print(x)


# # The Split() Function

# The split() function return a list where the string has been split at each match:

# In[16]:


# Split at each white-space character:

import re 

txt = "The rain in Spain"

x = re.split("\s",txt)

print(x)


# You can control the number of occurrences by specifying the maxsplit parameter

# In[17]:


# Split the string only at the first occurrence:

import re

txt = "The rain in Spain"

x = re.split("\s",txt,1)
print(x)


# # The sub() Function 

# The sub() function replaces the matches with the text of your choice:

# In[18]:


# Replace every white-space character with the number 9:

import re

txt = "The rain in Spain"

x = re.sub("\s","9",txt)

print(x)


# you can control the number of replacements by specifying the count parameter:

# In[20]:


# Replace the first 2 occurrences
import re

txt = "The rain in Spain"

x = re.sub("\s","9",txt, 2)

print(x)


# # Match Object

# A Match Object is an object containning information about the search and the result

# NOTE: if is no match , the value None will be returned, instead of the match object

# In[1]:


# Do a search that will return a match Object
import re 

txt = "The rain in Spain"

x = re.search("ai",txt)

print(x)

if x:
    print("yes, there is at least one match")
else:
    print("No , there is not match")


# The match object has properties and method used to retrieve information about the search, and the result:
#     
# .span() return a tuple containing the start, and end position of the match.
# .string return the string passed into the function
# .group() return the part of the string where there was a match

# print the postion(start and end position) of the first match occurrence.
# 
# the regular expression looks for any words that starts with an upper case"S
# 

# In[2]:


import re

txt = "The rain in Spain"

x = re.search(r"\bS\w+",txt)

print(x.span())


# In[3]:


# Print the string passed into the function:
import re

txt = "The rain in Spain"
x = re.search(r"\bS\w+",txt)

print(x.string)


# print the part of the string where there was a match.
# 
# The reguar expression looks for words that starts with an upper case "S"

# In[4]:


import re 

txt = "The rain in Spain"

x = re.search(r"\bS\w+",txt)

print(x.group)


# # Python PIP

# In[5]:


# import and use "camelcase"
import camelcase

c = camelcase.CamelCase()

txt = "hello world"

print(c.hump(txt))


# # Python try Except

# The try block lets you test a block of code for error.
# 
# The except block lest you handle the error
# 
# The finally block lest you execute code, regardless of the result of the try-and except blocks.

# # Exception Handling

# when an error occurs, or exception as we call it, python will normally stop and generate an error message.
# 
# These exceptions can be handaled uding the try statment:

# In[6]:


# The try block will generate an exception, because x is not defined:

try:
    print(x)
except:
    print("An exception occurred")


# Since the try block raises an error, the except block will be executed.
# 
# without the try block, the program will crash and raise an error

# In[7]:


# The statment will raise an error, because x is not defined:

print(x)


# # Many Exception

# you can define as many exception block as you want, eg - if you want to execute a special block of code for a special kind of error

# In[8]:


# Print one messagesif the try block rasises a NameError and another for other error

try:
    print(x)
except NameError:
    print("Variable x is not defined")
else:
    print("Something else went worng")


# # Else

# You can use the else keyword to define a block of be executed in no error were raised:

# In[9]:


# In this example, the try block does not generate any error:

try:
    print("Hello")
except:
    print("Something went wrong")
else:
    print("Nothing went wrong")


# # Finally

# In[10]:


# The finally block, if specified, will be executed regardless if the try block raises an error or not:

try:
    print(x)
except:
    print("Something went wrong")
else:
    print("The 'try except' is finished")


# The can be useful to close object and clean up resources:

# In[12]:


# Try to open and write to a file that is not writable:
try:
    f = open("demofile.txt")
    f.write("Lorum Ipsum")
except:
    print("Something went wormg when writing to the file")
finally:
    f.close()


# The program can continue, without leaving the file object open.

# # Raise an Exception

# As a python developer you can choose to throw an exception if a condition occurs:
#     
# To throw (or raise) an exception, use the rasie keyword.

# Raise an error and stop the program if x is lower than 0;

# In[13]:


x = -1
if x < 0:
    raise Exception("Sorry, no numbers below zero")


# The raise keyword is used to raise an exception.
# 
# you can define what kind of error to rasie, and the txt to print the user.

# In[14]:


# Raise a TypeError if x is not an integer:

x = "Hello"

if not type(x) is int:
    raise TypeError("Only integers are allowed")


# # Python User input

# # User input 

# Python allows for user input
# 
# That means we are able to ask the user for input.
# 
# The method is a bit diffrent in Python 3.6
# 
# Python 3.6 uses the input() method.

# In[15]:


username = input("Enter username:")

print("Username is :" + username)


# # Python String Formatting

# TO make sure a string will display as expected, we can format the result with the format() method.

# # String format()

# The format() method allows you to format selected parts of string.
# 
# sometimes there are parts of a text that you do not control mybe they come from a database, or user input
# 
# To control such value, add placeholders (curly brackets{} in yhe text, and run the vlues through the format())

# In[16]:


# Add a placeholder where you want to display the price:

price = 49

txt = "The price is {} dollars"

print(txt.format(price))


# You can add parameters inside the curly brackets to specify how to convert the value:

# In[17]:


# Format the price to be displayed as a number with two decimals:

txt = "The price is {:.2f} dollars"


# check out all formatting type in our String format() Reference.

# # MUltiple Value

# If you want to use more value, just add more value to the format() method:

# In[19]:


# print(txt.format(price, itemno, count))


# In[20]:


# And add more placeholders:

quantity = 3

itemno = 567

price = 49

myorder = "I want {} pieces of item number {} for {:.2f} dollars."

print(myorder.format(quantity,itemno,price))


# # index Number 

# #You can use index numbers(a number inside the curly brackets {0} to be sure the values are placed in the correct placeholders:

# In[21]:


quantity = 3
itemno = 567
price = 49
myorder = "I want {0} pieces of item number {1} for {2:.2f} dollars."
print(myorder.format(quantity, itemno, price))


# Also, if you want to refer to the same value more than once, use the index number:

# In[22]:


age = 36

name = "john"

txt = "His name is {1}.{1} is {0} years old."

print(txt.format(age, name))


# # Named Indexs

# you can also use named indexes by entering a name inside the curly bracket{carname}, but then you must use names when you pass the parameter value txt.format(carname = "Ford")

# In[23]:


myorder = "I have a {carname}, it is a {model}"

print(myorder.format(carname = "Ford", model = "Mustang"))


# # END

# In[ ]:



